class Node
	var key, p : int
	var left, right : Node
	var a : bool
	init(x: int)
		key, left, right, a := x, nil, nil, false 
	method add(x: int)
		when not a do
			if left != nil then 
				a,p := true,x
			elif x < key then
				left, right, key := new Node(x), new Node(key), x 
			elif x > key then
				left, right := new Node(key), new Node(x) 
	method has(x: int) : bool
		when not a do
			if left = nil then 
				return x = key
			elif x <= key then 
				return left.has(x) 
			else 
				return right.has(x)
	action addToChild 
		when a do
			if p <= key then 
				left.add(p) 
			else 
				right.add(p)
			a := false
class Start
	var root:Node
	var num:int
	var i:int
	init()
		num := getArg(2)
		for i := 0 to num do root.add(rand())
		for i := 0 to num do 
			if root.has(i) then
				print(i)