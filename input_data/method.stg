method(class_name, method_name, paranum, rettype, guard, block) ::=<<
;define method _<class_name>_<method_name>
_<class_name>_<method_name>:
_<class_name>_<method_name>_start:
    MOV  DWORD ECX, [ESP + 4 + 4*<paranum>]   ; + 4 * num(para)
_<class_name>_<method_name>_checklock:
    MOV  DWORD EAX, 1           ;lock
    XCHG EAX, [ECX + 8]
    CMP  DWORD EAX, 0
    JNE  _<class_name>_<method_name>_suspend
_<class_name>_<method_name>_checkguard:
    ; method guard starts here
    <guard>
    ; method guard ends here
_<class_name>_<method_name>_checkguard_fail:
    MOV  DWORD [ECX + 8], 0     ; unlock
_<class_name>_<method_name>_suspend:
    PUSH DWORD EBP
    CALL runqput
    POP  EBP
    CALL switch_to_sched
    JMP  _<class_name>_<method_name>_start
_<class_name>_<method_name>_succeed:
    ; method body starts here
    __<class_name>_<method_name>_body
    ; method body ends here
_<class_name>_<method_name>_unlock:
    MOV  DWORD ECX, [ESP + 4 + 4*<paranum>]   ; + 4 * num(para)
    PUSH DWORD EAX              ; for the return val
    PUSH DWORD EBP
    PUSH DWORD ECX
    CALL runqput
    POP  DWORD ECX
    POP  DWORD EBP
    POP  DWORD EAX              ; for the return val
    ; unlock
    MOV DWORD [ECX + 8], 0
_<class_name>_<method_name>_ret:
    RET 
>>